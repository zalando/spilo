FROM ubuntu:16.04

MAINTAINER Alexander Kukushkin <alexander.kukushkin@zalando.de>

ARG DEMO=false
ENV DEMO=$DEMO

RUN export DEBIAN_FRONTEND=noninteractive \
    && apt-get purge -y --allow-remove-essential systemd \

    && echo 'APT::Install-Recommends "0";' > /etc/apt/apt.conf.d/01norecommend \
    && echo 'APT::Install-Suggests "0";' >> /etc/apt/apt.conf.d/01norecommend \

    && apt-get update \
    && apt-get upgrade -y \

    && apt-get install -y curl ca-certificates less locales jq vim-tiny \

    && if [ "$DEMO" != "true" ]; then \
        apt-get install -y cron \
                # Required for wal-e
                pv lzop \

        # install etcdctl
        && ETCDVERSION=2.3.8 \
        && curl -L https://github.com/coreos/etcd/releases/download/v${ETCDVERSION}/etcd-v${ETCDVERSION}-linux-amd64.tar.gz \
                | tar xz -C /bin --strip=1 --wildcards --no-anchored etcdctl etcd; \
    fi \

    ## Make sure we have a en_US.UTF-8 locale available
    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \

    # Add PGDG repositories
    && DISTRIB_CODENAME=$(sed -n 's/DISTRIB_CODENAME=//p' /etc/lsb-release) \
    && echo "deb http://apt.postgresql.org/pub/repos/apt/ ${DISTRIB_CODENAME}-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && echo "deb-src http://apt.postgresql.org/pub/repos/apt/ ${DISTRIB_CODENAME}-pgdg main" >> /etc/apt/sources.list.d/pgdg.list \
    && curl -s -o - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \

    && apt-get update \
    && apt-get install -y postgresql-common \

    # forbid creation of a main cluster when package is installed
    && sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf \

    # Clean up
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
            /var/cache/debconf/* \
            /usr/share/doc \
            /usr/share/man \
            /usr/share/locale/?? \
            /usr/share/locale/??_?? \
    && find /var/log -type f -exec truncate --size 0 {} \; \
    && find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \
    && find /usr/share/i18n/locales/ -type f ! -name en_US -delete \
    && echo 'en_US.UTF-8 UTF-8' > /usr/share/i18n/SUPPORTED

ADD dependencies/debs /builddeps

ARG WITH_PERL=false
ARG PGOLDVERSIONS="9.3 9.4 9.5 9.6"
ARG PGVERSION="10"

# Install PostgreSQL, extensions and contribs
ENV PGVERSION="$PGVERSION" \
    PGOLDVERSIONS="$PGOLDVERSIONS" \
    POSTGIS_VERSION=2.4 \
    BG_MON_COMMIT=57f50fd9b92a9ed3cdb185118fbce27d4d56984c \
    DECODERBUFS_COMMIT=e2da72713909d4315aa63f46819412ec4f9f6a42 \
    SET_USER=REL1_4_0 \
    PLPGSQL_CHECK=v1.2.2 \
    PLPROFILER=REL3_2 \
    TIMESCALEDB=0.9.1 \
    PGEXTWLIST=v1.6 \
    PAM_OAUTH2=v1.0

RUN export DEBIAN_FRONTEND=noninteractive \
    && set -ex \
    && apt-get update \
    && cd /builddeps \
    && BUILD_PACKAGES="devscripts build-essential equivs gcc automake autogen libtool cmake pgxnclient libedit-dev zlib1g-dev libssl-dev libselinux1-dev libkrb5-dev libxslt1-dev libxml2-dev libpam0g-dev libcurl4-openssl-dev pkg-config libevent-dev git dh-autoreconf python-docutils" \
    && if [ "$DEMO" = "true" ]; then \
        PGOLDVERSIONS=""; \
    else \
        BUILD_PACKAGES="$BUILD_PACKAGES libprotobuf-c-dev liblwgeom-dev libproj-dev" \
        && if [ "$WITH_PERL" != "true" ]; then \
            apt-get install -y equivs \
            && version=$(apt-cache show perl | sed -n 's/^Version: //p' | sort -rV | head -n 1) \
            && echo "Section: misc\nPriority: optional\nStandards-Version: 3.9.2\nPackage: perl\nReplaces: perl-base\nVersion: $version\nDescription: perl" > perl \
            && equivs-build perl \
            && dpkg -i perl*.deb; \
        fi \

        && dpkg -i libcgal[^-]*_amd64.deb \
                    libgdal[^-]*_amd64.deb \
                    libsfcgal[^-]*_amd64.deb \
                || apt-get -y -f install \
        && apt-get install -y libprotobuf-c1 \

        && curl -s -L https://github.com/debezium/postgres-decoderbufs/archive/$DECODERBUFS_COMMIT.tar.gz | tar xz; \
    fi \

    && apt-get install -y libcurl3 libevent-2.0 libevent-pthreads-2.0 python3.5 $BUILD_PACKAGES \

    # prepare 3rd sources
    && curl -s -L https://github.com/CyberDem0n/bg_mon/archive/$BG_MON_COMMIT.tar.gz | tar xz \

    && git clone -b $SET_USER https://github.com/pgaudit/set_user.git \

    && git clone -b $PLPGSQL_CHECK https://github.com/okbob/plpgsql_check.git \

    && git clone -b $PLPROFILER https://bitbucket.org/openscg/plprofiler.git \

    && git clone -b $TIMESCALEDB https://github.com/timescale/timescaledb.git \

    && git clone -b $PGEXTWLIST https://github.com/dimitri/pgextwlist.git \
    && perl -ne 'print unless /PG_TRY/ .. /PG_CATCH/' pgextwlist/pgextwlist.c > pgextwlist.c.f \
    && egrep -v '(PG_END_TRY|EmitWarningsOnPlaceholders)' pgextwlist.c.f > pgextwlist/pgextwlist.c \

    && git clone git://www.sigaev.ru/plantuner.git \

    && git clone https://github.com/reorg/pg_repack.git \
    && cd pg_repack \
    && curl -sL https://github.com/reorg/pg_repack/pull/176.diff | patch -p1 \

    && for version in ${PGOLDVERSIONS} ${PGVERSION}; do \
            sed -i "s/ main.*$/ main $version/g" /etc/apt/sources.list.d/pgdg.list \
            && apt-get update \

            && if [ $version = "9.3" ]; then \
                EXTRAS=""; \
            else \
                EXTRAS="postgresql-${version}-amcheck" \
                && if [ $version != "9.4" ]; then \
                    EXTRAS="$EXTRAS postgresql-${version}-cron"; \
                fi; \
            fi \

            # Install PostgreSQL binaries, contrib, plproxy and multiple pl's
            && apt-get install --allow-downgrades -y postgresql-contrib-${version} $EXTRAS \
                        postgresql-${version}-plproxy postgresql-plpython3-${version} \
                        postgresql-${version}-pldebugger postgresql-${version}-hypopg \
                        postgresql-${version}-pgq3 libpq5=$version* \
                        libpq-dev=$version* postgresql-server-dev-${version} \

            && ln -snf /usr/lib/postgresql/${version}/lib/libpgcommon.a /usr/lib/x86_64-linux-gnu/libpgcommon.a \
            && ln -snf /usr/lib/postgresql/${version}/lib/libpgport.a /usr/lib/x86_64-linux-gnu/libpgport.a \

            && if [ "$DEMO" != "true" ]; then \
                apt-get install -y postgresql-${version}-plv8 \
                            postgresql-${version}-postgis-${POSTGIS_VERSION} \
                            postgresql-${version}-postgis-${POSTGIS_VERSION}-scripts \
                            postgresql-pltcl-${version} postgresql-${version}-pllua \
                && if [ "$WITH_PERL" = "true" ]; then \
                    apt-get install -y postgresql-plperl-${version}; \
                fi; \
            fi \

            # Install 3rd stuff
            && for extension in quantile trimmed_aggregates; do \
                pgxn install $extension \
                && strip /usr/lib/postgresql/$version/lib/$extension.so; \
            done \

            && cd /builddeps \
            && for n in bg_mon-${BG_MON_COMMIT} set_user plpgsql_check plprofiler pgextwlist plantuner; do \
                make -C $n USE_PGXS=1 clean install-strip; \
            done \

            && make -C pg_repack USE_PGXS=1 clean install \
            && strip /usr/lib/postgresql/$version/lib/pg_repack.so /usr/lib/postgresql/$version/bin/pg_repack \

            && if [ "$version" != "9.3" ] && [ "$DEMO" != "true" ]; then \
                make -C postgres-decoderbufs-$DECODERBUFS_COMMIT clean install-strip; \
            fi \

            # Install pg_rewind on 9.3 and 9.4
            && if [ "$version" = "9.3" ] || [ "$version" = "9.4" ]; then \
                REWIND_VER=REL$(echo $version | sed 's/\./_/')_STABLE \
                && apt-get source postgresql-${version} \
                && curl -s -L https://github.com/vmware/pg_rewind/archive/${REWIND_VER}.tar.gz | tar xz \
                && make -C pg_rewind-${REWIND_VER} USE_PGXS=1 top_srcdir=../$(ls -d postgresql-${version}-*) install-strip \
                && rm -fr pg_rewind-${REWIND_VER} postgresql-${version}*; \
            fi \

            && if [ "$version" = "9.6" ] || [ "$version" = "10" ]; then \
                cd /builddeps/timescaledb \
                && rm -fr build \
                && ./bootstrap \
                && make -C build install \
                && strip /usr/lib/postgresql/$version/lib/timescaledb.so; \
            fi \

            && apt-get purge -y libpq-dev=$version*; \
    done \

    && apt-get install -y skytools3-ticker pspg \

    && if [ "$DEMO" != "true" ]; then \
        cd /builddeps \

        # patch, build and install pgbouncer
        && apt-get source pgbouncer \
        && cd $(ls -d pgbouncer-*) \
        # Set last_connect_time for pool only when it really failed to connect
        && curl -sL https://github.com/pgbouncer/pgbouncer/pull/127.diff | patch -p1 \
        # Increase password size
        && sed -i 's/\(MAX_PASSWORD\t\).*/\11024/' include/bouncer.h \
        && debuild -b -uc -us \
        && dpkg -i ../pgbouncer_*.deb \
        && cd .. \

        # patch, build and install partman (get rid from python2.7 dependency)
        && apt-get install -y postgresql-server-dev-all \
        && apt-get source postgresql-${version}-partman \
        && cd $(ls -d pg-partman-*) \
        && sed -i 's|/usr/bin/env python|/usr/bin/env python3|' bin/*.py \
        && sed -i 's|python|python3|g' debian/control.in \
        && debuild -b -uc -us \
        && cd .. \
        && for version in ${PGOLDVERSIONS} ${PGVERSION}; do \
            for deb in postgresql-${version}-partman_*.deb; do \
                if [ -f $deb ]; then dpkg -i $deb; fi; \
            done; \
        done; \
    fi \

    # install pam_oauth2.so
    && git clone -b $PAM_OAUTH2 --recurse-submodules https://github.com/CyberDem0n/pam-oauth2.git \
    && make -C pam-oauth2 install \

    # Clean up
    && apt-get purge -y ${BUILD_PACKAGES} postgresql-server-dev-* libmagic1 bsdmainutils \
    && apt-get autoremove -y \

    && apt-get clean \
    && dpkg -l | grep '^rc' | awk '{print $2}' | xargs apt-get purge -y \

    && if [ "$DEMO" != "true" ]; then \
        for v in /usr/share/postgresql/*; do \
            cd $v/extension \
            && for e in postgis postgis_sfcgal; do \
                orig=$(ls -1 $e--*--*.sql | head -n1) \
                && for f in $e--*--*.sql; do \
                    if [ "$f" != "$orig" ] && diff $f $orig > /dev/null; then \
                        rm $f \
                        && ln -s $orig $f; \
                    fi; \
                done; \
            done; \
        done \

        && cd /usr/share/postgresql/$PGVERSION/extension \
        && for orig in $(ls -1 *.sql | grep -v -- '--'); do \
            for f in ${orig%.sql}--*.sql; do \
                if diff $orig $f > /dev/null; then \
                    rm $f \
                    && ln -s $orig $f; \
                fi; \
            done; \
        done \

        && for e in pgq plproxy postgis_tiger_geocoder postgis_topology postgis_sfcgal address_standardizer address_standardizer_data_us; do \
            orig=$(ls -1 $e--*--*.sql 2> /dev/null | head -n1) \
            && if [ "x$orig" != "x" ]; then \
                for f in $e--*--*.sql; do \
                    if [ "$f" != "$orig" ] && diff $f $orig > /dev/null; then \
                        rm $f \
                        && ln -s $orig $f; \
                    fi; \
                done; \
            fi; \
        done \

        && for f in *.sql *.control; do \
            for v in /usr/share/postgresql/*; do \
                if [ "$v" != "/usr/share/postgresql/$PGVERSION" ] \
                        && [ -f $v/extension/$f ] \
                        && [ ! -L $v/extension/$f ] \
                        && diff $v/extension/$f $f > /dev/null; then \
                    rm $v/extension/$f \
                    && ln -s /usr/share/postgresql/$PGVERSION/extension/$f $v/extension/$f; \
                fi; \
            done; \
        done \

        && cd /usr/share/postgresql/9.5/extension \
        && for f in *.sql *.control; do \
            for v in 9.3 9.4; do \
                if [ -f /usr/share/postgresql/$v/extension/$f ] \
                        && [ ! -L /usr/share/postgresql/$v/extension/$f ] \
                        && diff $v/extension/$f $f > /dev/null; then \
                    rm /usr/share/postgresql/$v/extension/$f \
                    && ln -s /usr/share/postgresql/9.5/extension/$f /usr/share/postgresql/$v/extension/$f; \
                fi; \
            done; \
        done \

        && cd /usr/share/postgresql/$PGVERSION/contrib \
        && for f in *.sql *.html; do \
            for v in /usr/share/postgresql/*; do \
                if [ "$v" != "/usr/share/postgresql/$PGVERSION" ] && diff $v/contrib/$f $f > /dev/null; then \
                    rm $v/contrib/$f \
                    && ln -s /usr/share/postgresql/$PGVERSION/contrib/$f $v/contrib/$f; \
                fi; \
            done; \
        done \

        && cd /usr/share/postgresql/$PGVERSION/contrib/postgis-$POSTGIS_VERSION \
        && for f in *.sql *.pl; do \
            for v in /usr/share/postgresql/*; do \
                if [ "$v" != "/usr/share/postgresql/$PGVERSION" ] && diff $v/contrib/postgis-$POSTGIS_VERSION/$f $f > /dev/null; then \
                    rm $v/contrib/postgis-$POSTGIS_VERSION/$f \
                    && ln -s /usr/share/postgresql/$PGVERSION/contrib/postgis-$POSTGIS_VERSION/$f $v/contrib/postgis-$POSTGIS_VERSION/$f; \
                fi; \
            done; \
        done \

        && cd /usr/share/postgresql/9.5/contrib/postgis-$POSTGIS_VERSION \
        && for f in *.sql *.pl; do \
            for v in 9.3 9.4; do \
                if [ -f /usr/share/postgresql/$v/contrib/postgis-$POSTGIS_VERSION/$f ] \
                        && [ ! -L /usr/share/postgresql/$v/contrib/postgis-$POSTGIS_VERSION/$f ] \
                        && diff /usr/share/postgresql/$v/contrib/postgis-$POSTGIS_VERSION/$f $f > /dev/null; then \
                    rm /usr/share/postgresql/$v/contrib/postgis-$POSTGIS_VERSION/$f \
                    && ln -s /usr/share/postgresql/9.5/contrib/postgis-$POSTGIS_VERSION/$f \
                            /usr/share/postgresql/$v/contrib/postgis-$POSTGIS_VERSION/$f; \
                fi; \
            done; \
        done \

        && cd /usr/lib/postgresql/$PGVERSION/bin \
        && for u in clusterdb pg_archivecleanup pg_basebackup pg_isready pg_test_fsync pg_test_timing pgbench psql reindexdb vacuumdb vacuumlo *.py; do \
            for v in /usr/lib/postgresql/*; do \
                if [ "$v" != "/usr/lib/postgresql/$PGVERSION" ] && [ -f "$v/bin/$u" ]; then \
                    rm $v/bin/$u \
                    && ln -s /usr/lib/postgresql/$PGVERSION/bin/$u $v/bin/$u; \
                fi; \
            done; \
        done; \
    fi \

    && find /var/log -type f -exec truncate --size 0 {} \; \

    && rm -rf /var/lib/apt/lists/* \
            /var/cache/debconf/* \
            /builddeps \
            /usr/share/doc \
            /usr/share/man \
            /usr/share/info \
            /usr/share/locale/?? \
            /usr/share/locale/??_?? \
            /usr/lib/x86_64-linux-gnu/libpgcommon.a \
            /usr/lib/x86_64-linux-gnu/libpgport.a \
            /usr/share/postgresql/*/man \
            /etc/pgbouncer/* \
            /usr/lib/postgresql/*/bin/createdb \
            /usr/lib/postgresql/*/bin/createlang \
            /usr/lib/postgresql/*/bin/createuser \
            /usr/lib/postgresql/*/bin/dropdb \
            /usr/lib/postgresql/*/bin/droplang \
            /usr/lib/postgresql/*/bin/dropuser \
            /usr/lib/postgresql/*/bin/pg_recvlogical \
            /usr/lib/postgresql/*/bin/pg_standby \
            /usr/lib/postgresql/*/bin/pltcl_*

# Install patroni and WAL-e
ENV PATRONIVERSION=1.4.3
ENV WALE_VERSION=1.1.0
RUN export DEBIAN_FRONTEND=noninteractive \
    && set -ex \
    && BUILD_PACKAGES="python3-pip python3-wheel python3-dev gcc git" \
    && apt-get update \
    && apt-get install -y python3 python3-click python3-yaml python3-six python3-pystache python3-prettytable \
                python3-psycopg2 python3-pyasn1-modules python3-rsa python3-dateutil ${BUILD_PACKAGES} \

    && pip3 install setuptools --upgrade \

    && if [ "$DEMO" = "true" ]; then \
        EXTRAS=""; \
    else \
        EXTRAS=",etcd,consul,zookeeper,aws" \
        && apt-get install -y python3-dnspython python3-kazoo python3-meld3 \
        && pip3 install envdir wal-e[aws,google]==$WALE_VERSION \
                'git+https://github.com/Supervisor/supervisor.git@master#egg=supervisor' \
                'git+https://github.com/zalando/pg_view.git@master#egg=pg-view' \

        # pg_view installs useless pytest
        && pip3 uninstall -y attrs pluggy pytest py \
        && sed -i '/^pytest/d' /usr/local/lib/python3.5/dist-packages/pg_view-*/requires.txt \

        # https://github.com/wal-e/wal-e/issues/318
        && sed -i 's/^\(    for i in range(0,\) num_retries):.*/\1 100):/g' /usr/local/lib/python3.5/dist-packages/boto/utils.py \

        && echo 4.0.0.dev0 > /usr/local/lib/python3.5/dist-packages/supervisor/version.txt; \
    fi \
    && pip3 install "patroni[kubernetes$EXTRAS]==$PATRONIVERSION" \

    # use system tzdata to save space
    && mv /usr/local/lib/python3.5/dist-packages/pytz/zoneinfo/tzdata.zi /usr/share/zoneinfo/ \
    && rm -fr /usr/local/lib/python3.5/dist-packages/pytz/zoneinfo \
    && ln -s /usr/share/zoneinfo /usr/local/lib/python3.5/dist-packages/pytz/zoneinfo \

    && for d in /usr/lib/python3 /usr/local/lib/python3.5; do \
        cd $d/dist-packages \
        && find . -type d -name tests | xargs rm -fr \
        && find . -type f -name 'test_*.py*' -delete; \
    done \
    && find . -type f -name '*.so' -exec strip {} \; \
    && find . -type f -name '*.c' -delete \
    && find . -type f -name 'unittest_*.py*' -delete \
    && find . -type f -name '*_test.py' -delete \
    && find . -type f -name '*_test.cpython*.pyc' -delete \

    # Clean up
    && apt-get purge -y ${BUILD_PACKAGES} \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
            /var/cache/debconf/* \
            /root/.cache \
            /usr/share/doc \
            /usr/share/man \
            /usr/share/locale/?? \
            /usr/share/locale/??_?? \
            /usr/share/info \

    && find /var/log -type f -exec truncate --size 0 {} \;

ARG COMPRESS=false

RUN set -ex \
    && if [ "$COMPRESS" = "true" ]; then \
        apt-get update \
        && apt-get install -y busybox xz-utils \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/* /var/cache/debconf/* /usr/share/doc /usr/share/man /etc/rc?.d /etc/systemd \
        && ln -snf busybox /bin/sh \
        && files="/bin/sh" \
        && libs="$(ldd $files | awk '{print $3;}' | grep '^/' | sort -u) /lib/x86_64-linux-gnu/ld-linux-x86-64.so.* /lib/x86_64-linux-gnu/libnsl.so.* /lib/x86_64-linux-gnu/libnss_compat.so.*" \
        && (echo /var/run $files $libs | tr ' ' '\n' && realpath $files $libs) | sort -u | sed 's/^\///' > /exclude \
        && find /etc/alternatives -xtype l -delete \
        && save_dirs="usr lib var bin sbin etc/ssl etc/init.d etc/alternatives etc/apt" \
        && XZ_OPT=-e9v tar -X /exclude -cpJf a.tar.xz $save_dirs \
        && rm -fr /usr/local/lib/python* \
        && /bin/busybox sh -c "(find $save_dirs -not -type d && cat /exclude /exclude && echo exclude) | sort | uniq -u | xargs /bin/busybox rm" \
#        && /bin/busybox --install -s \
        && /bin/busybox sh -c "find $save_dirs -type d -depth -exec rmdir -p {} \; 2> /dev/null"; \
    fi
